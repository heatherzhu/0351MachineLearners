{"version":3,"sources":["components/example_line_plot.png","components/example_abstract_plot.png","components/facebook_logo.png","components/instagram_logo.png","components/twitter_logo.png","components/Rendering.js","components/MainTextArea.js","components/Home.js","components/TeamPhotos/Lillian.jpg","components/profile-placeholder.png","components/TeamPhotos/Heather.jpg","components/TeamPhotos/Megan.jpg","components/TeamPhotos/Neil.jpg","components/TeamPhotos/Patrick.jpg","components/TeamPhotos/Shaan.jpg","components/TeamPhotos/Yaewon.jpg","components/About.js","components/Header.js","index.js"],"names":["MirthSphere","props","mesh","useRef","ref","args","color","DiscontentmentTriangle","rotation","Math","random","PleasureSphere","SadnessSphere","LoveSphere","ApprovalCube","HappinessSphere","ConfidenceCube","GiddySphere","JoySphere","EmbarrassedSphere","BoredCube","ContentSphere","CelebrationCube","HopelessSphere","NervousCone","HopeSphere","ConfusedCube","AffectionateSphere","DisappointedTriangle","ShySphere","FrustratedTriangle","AngerTriangle","PlayfulSphere","IrritatedCone","SickCone","CuriosityCylinder","ViolentCone","EvilTriangle","StressedCube","HeartbrokenSphere","SurprisedCube","GuardedCube","StrongCone","ScaredCone","ExcitedSphere","Rendering","canvasRef","React","createRef","array","this","renderedObjects","positiveIndex","negativeIndex","spherePositiveIndex","sphereNegativeIndex","sphereNegZIndex","spherePosZIndex","negZIndex","posZIndex","positiveY","negativeY","positiveYSphere","negativeYSphere","startPosition","maxShapes","negativeXSphere","positiveXSphere","negativeX","positiveX","negativeZSphere","positiveZSphere","negativeZ","positiveZ","i","length","emotions","nonzero_emotions","key","new_obj","push","sort","a","b","confidence","emotion","position","style","height","intensity","angle","penumbra","OrbitControls","Component","MainTextArea","state","typingTimer","inputString","actualTextRef","textUpdate","bind","updateParent","clearValue","current","value","event","clearTimeout","target","setState","setTimeout","handler","Form","Group","controlId","Control","as","rows","onChange","placeholder","Home","showCSVDownloadModal","show2DImageDownloadModal","show3DImageDownloadModal","showShareModal","diagramData","sentiments","movingAverage","tokens","clearText","open2DImageDownloadModal","close2DImageDownloadModal","open3DImageDownloadModal","close3DImageDownloadModal","openCSVDownloadModal","closeCSVDownloadModal","openShareModal","closeShareModal","saveChart","saveAbstract","callServer","triggerDownload","mainTextAreaRef","saveCSV","input_string","console","log","fetch","method","credentials","headers","Accept","body","JSON","stringify","then","response","json","res","concat","x_values","catch","error","imgURI","evt","MouseEvent","view","window","bubbles","cancelable","document","createElement","setAttribute","dispatchEvent","csvContent","Object","keys","line","text","replace","values","encodedUri","encodeURI","link","download","href","click","getElementById","children","toDataURL","svg","getBBox","width","data","XMLSerializer","serializeToString","DOMURL","URL","webkitURL","img","svgBlob","Blob","type","url","createObjectURL","onload","canvas","getContext","drawImage","revokeObjectURL","src","className","Button","id","variant","onClick","Tabs","defaultActiveKey","transition","Tab","eventKey","title","theme","VictoryTheme","material","orientation","x","name","symbol","fill","stroke","Modal","show","onHide","Header","closeButton","Title","Body","Footer","centered","dialogClassName","margin","FacebookShareButton","quote","hashtag","FacebookIcon","size","round","RedditShareButton","RedditIcon","TwitterShareButton","TwitterIcon","About","Image","Lillian","Heather","Megan","Neil","Patrick","Shaan","Yaewon","Navbar","Collapse","Nav","to","Link","Brand","ReactDOM","render","StrictMode","exact","path","component"],"mappings":"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","file":"static/js/main.0f1844e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/example_line_plot.be0f0d5a.png\";","export default __webpack_public_path__ + \"static/media/example_abstract_plot.f85a4463.png\";","export default __webpack_public_path__ + \"static/media/facebook_logo.3cb08c9d.png\";","export default __webpack_public_path__ + \"static/media/instagram_logo.1a1f0759.png\";","export default __webpack_public_path__ + \"static/media/twitter_logo.973f7211.png\";","import React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport {OrbitControls} from '@react-three/drei'\n\n/*let array = [\n    [\"Mirth\", \"Discontentment\", \"Pleasure\", \"Sadness\", \"Love\"],\n    [\"Approval\", \"Happiness\", \"Confidence\", \"Giddy\", \"Joy\"],\n    [\"Embarressed\", \"Bored\", \"Content\", \"Celebration\", \"Hopeless\"],\n    [\"Discontentment\"],\n    [\"Pleasure\"],\n    [\"Sadness\"],\n    [\"Love\"],\n    [\"Happiness\"],\n    [\"Confidence\"],\n    [\"Giddy\"],\n    [\"Joy\"],\n    [\"Embarrassed\"]\n  ];*/\n\nfunction MirthSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#f5f542\" />\n        </mesh>\n    )\n\n}\n\nfunction DiscontentmentTriangle(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <tetrahedronBufferGeometry args={[1]} />\n            <meshStandardMaterial color=\"#141e85\"/>\n        </mesh>\n    )\n\n}\n\nfunction PleasureSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#fec7ff\" />\n        </mesh>\n    )\n\n}\n\nfunction SadnessSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#3124a3\" />\n        </mesh>\n    )\n\n}\n\nfunction LoveSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ff0000\" />\n        </mesh>\n    )\n\n}\n\nfunction ApprovalCube(props) {\n    const mesh = useRef()\n\n\n  return (\n        <mesh\n        rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n        {...props}\n        ref={mesh}>\n        <boxBufferGeometry args={[1, 1, 1]} />\n        <meshStandardMaterial color=\"#f5ef38\" />\n        </mesh>\n    )\n}\n\nfunction HappinessSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#fff700\" />\n        </mesh>\n    )\n\n}\n\nfunction ConfidenceCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#33c5ff\" />\n        </mesh>\n    )\n\n}\n\nfunction GiddySphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#f7f728\" />\n        </mesh>\n    )\n\n}\n\nfunction JoySphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ffff0a\" />\n        </mesh>\n    )\n\n}\n\nfunction EmbarrassedSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ff80fd\" />\n        </mesh>\n    )\n\n}\n\nfunction BoredCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#a2a6a8\" />\n        </mesh>\n    )\n\n}\n\nfunction ContentSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#fffc96\" />\n        </mesh>\n    )\n\n}\n\nfunction CelebrationCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#ffd700\" />\n        </mesh>\n    )\n\n}\n\nfunction HopelessSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#00008b\" />\n        </mesh>\n    )\n\n}\n\nfunction NervousCone(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <coneBufferGeometry args={[0.5, -2, 20, 32]} />\n            <meshStandardMaterial color=\"#f03232\" />\n        </mesh>\n    )\n\n}\n\nfunction HopeSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ffb8b8\" />\n        </mesh>\n    )\n\n}\n\nfunction ConfusedCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#f7ae48\" />\n        </mesh>\n    )\n\n}\n\nfunction AffectionateSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#fa8787\" />\n        </mesh>\n    )\n\n}\n\nfunction DisappointedTriangle(props) {\n    const mesh = useRef()\n\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <tetrahedronBufferGeometry args={[1]} />\n            <meshStandardMaterial color=\"#d79eff\" />\n        </mesh>\n    )\n\n}\n\nfunction ShySphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ffbfbf\" />\n        </mesh>\n    )\n\n}\n\nfunction FrustratedTriangle(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <tetrahedronBufferGeometry args={[1]} />\n            <meshStandardMaterial color=\"#c90c0c\" />\n        </mesh>\n    )\n\n}\n\nfunction AngerTriangle(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <tetrahedronBufferGeometry args={[1]} />\n            <meshStandardMaterial color=\"#8B0000\" />\n        </mesh>\n    )\n\n}\n\nfunction PlayfulSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ffb52b\" />\n        </mesh>\n    )\n\n}\n\nfunction IrritatedCone(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <coneBufferGeometry args={[0.5, -2, 20, 32]} />\n            <meshStandardMaterial color=\"#d16a60\" />\n        </mesh>\n    )\n\n}\n\nfunction SickCone(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <coneBufferGeometry args={[0.5, -2, 20, 32]} />\n            <meshStandardMaterial color=\"#33913f\" />\n        </mesh>\n    )\n\n}\n\nfunction CuriosityCylinder(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <cylinderBufferGeometry args={[.5, .5, 1, 20, 32]} />\n            <meshStandardMaterial color=\"#c9fac5\" />\n        </mesh>\n    )\n\n}\n\nfunction ViolentCone(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <coneBufferGeometry args={[0.5, -2, 20, 32]} />\n            <meshStandardMaterial color=\"#ff3814\" />\n        </mesh>\n    )\n\n}\n\nfunction EvilTriangle(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <tetrahedronBufferGeometry args={[1]} />\n            <meshStandardMaterial color=\"#880808\" />\n        </mesh>\n    )\n\n}\n\nfunction StressedCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#d16a60\" />\n        </mesh>\n    )\n\n}\n\nfunction HeartbrokenSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#133585\" />\n        </mesh>\n    )\n\n}\n\nfunction SurprisedCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#ffc2fc\" />\n        </mesh>\n    )\n\n}\n\nfunction GuardedCube(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"#e3e3d8\" />\n        </mesh>\n    )\n\n}\n\nfunction StrongCone(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <coneBufferGeometry args={[0.5, 2, 20, 32]} />\n            <meshStandardMaterial color=\"#145717\" />\n        </mesh>\n    )\n\n}\n\nfunction ScaredCone(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            rotation={[(Math.random() * 1) - 1, (Math.random() * 1) - 1, (Math.random() * 1) - 1]}\n            {...props}\n            ref={mesh}>\n            <coneBufferGeometry args={[0.2, -3, 20, 32]} />\n            <meshStandardMaterial color=\"#761bd1\" />\n        </mesh>\n    )\n\n}\n\nfunction ExcitedSphere(props) {\n    const mesh = useRef()\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}>\n            <sphereBufferGeometry args={[.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ffff24\" />\n        </mesh>\n    )\n\n}\n\nclass Rendering extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n    }\n\n    render() {\n        let array = this.props.array;\n\n        this.renderedObjects = [];\n        let positiveIndex = 0;\n        let negativeIndex = 0;\n        let spherePositiveIndex = 0;\n        let sphereNegativeIndex = 0;\n        let sphereNegZIndex = 0;\n        let spherePosZIndex = 0;\n        let negZIndex = 0;\n        let posZIndex = 0;\n        let positiveY = 0;\n        let negativeY = -1;\n        let positiveYSphere = 0.7;\n        let negativeYSphere = -3;\n\n        let startPosition = -5;\n        let maxShapes = 10;\n        let maxSphere = 7;\n        let maxZ = 3;\n\n        let negativeXSphere = startPosition;\n        let positiveXSphere = startPosition;\n        let negativeX = startPosition;\n        let positiveX = startPosition;\n\n        let negativeZSphere = -1;\n        let positiveZSphere = -1;\n        let negativeZ = -1;\n        let positiveZ = -1;\n\n        for (let i = 0; i < array.length; i++) {\n            let emotions = array[i].emotions;\n            let nonzero_emotions = []\n            for (var key in emotions) {\n                if (emotions[key] != 0) {\n                    let new_obj = {}\n                    new_obj[\"emotion\"] = key\n                    new_obj[\"confidence\"] = emotions[key]\n                    nonzero_emotions.push(new_obj)\n                    // nonzero_emotions.push({key: emotions[key]});\n                }\n            }\n            nonzero_emotions.sort((a, b) => b.confidence - a.confidence)\n            //console.log(\"Nonzeros:\");\n            //console.log(nonzero_emotions);\n            //console.log(nonzero_emotions[0].emotion);\n            //let stripped_emotions = emotions.filter(({entry}) => entry != 0)\n            if (nonzero_emotions[0].emotion === \"Mirth\") {\n                this.renderedObjects.push( <MirthSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = -1;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Discontentment\") {\n                this.renderedObjects.push( <DiscontentmentTriangle position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Pleasure\") {\n                this.renderedObjects.push( <PleasureSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Sadness\") {\n                this.renderedObjects.push( <SadnessSphere position={[(Math.random() * (negativeXSphere + 1)) + negativeXSphere, (Math.random() * (negativeYSphere + 1)) + negativeYSphere, (Math.random() * (negativeZSphere + 1)) + negativeZSphere]} />);\n                sphereNegativeIndex++;\n                negativeXSphere += 1.5;\n                if (sphereNegativeIndex === maxSphere) {\n                    sphereNegativeIndex = 0;\n                    sphereNegZIndex++;\n                    negativeZSphere++;\n                    negativeXSphere = startPosition;\n                    if (sphereNegZIndex === maxZ) {\n                        negativeZSphere = -1;\n                        sphereNegZIndex = 0;\n                        negativeYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Love\") {\n                this.renderedObjects.push( <LoveSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Approval\") {\n                this.renderedObjects.push( <ApprovalCube position={[positiveX, positiveY, positiveZ]} />);\n                positiveIndex++;\n                positiveX += 1;\n                if (positiveIndex === maxShapes) {\n                    positiveIndex = 0;\n                    posZIndex++;\n                    positiveZ++;\n                    positiveX = startPosition;\n                    if (posZIndex === maxZ) {\n                        positiveZ = -1;\n                        posZIndex = 0;\n                        positiveY += 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Happiness\") {\n                this.renderedObjects.push( <HappinessSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Confidence\") {\n                this.renderedObjects.push( <ConfidenceCube position={[positiveX, positiveY, positiveZ]} />);\n                positiveIndex++;\n                positiveX += 1;\n                if (positiveIndex === maxShapes) {\n                    positiveIndex = 0;\n                    posZIndex++;\n                    positiveZ++;\n                    positiveX = startPosition;\n                    if (posZIndex === maxZ) {\n                        positiveZ = -1;\n                        posZIndex = 0;\n                        positiveY += 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Giddy\") {\n                this.renderedObjects.push( <GiddySphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Joy\") {\n                this.renderedObjects.push( <JoySphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Embarrassed\") {\n                this.renderedObjects.push( <EmbarrassedSphere position={[(Math.random() * (negativeXSphere + 1)) + negativeXSphere, (Math.random() * (negativeYSphere + 1)) + negativeYSphere, (Math.random() * (negativeZSphere + 1)) + negativeZSphere]} />);\n                sphereNegativeIndex++;\n                negativeXSphere += 1.5;\n                if (sphereNegativeIndex === maxSphere) {\n                    sphereNegativeIndex = 0;\n                    sphereNegZIndex++;\n                    negativeZSphere++;\n                    negativeXSphere = startPosition;\n                    if (sphereNegZIndex === maxZ) {\n                        negativeZSphere = -1;\n                        sphereNegZIndex = 0;\n                        negativeYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Bored\") {\n                this.renderedObjects.push( <BoredCube position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Content\") {\n                this.renderedObjects.push( <ContentSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Celebration\") {\n                this.renderedObjects.push( <CelebrationCube position={[positiveX, positiveY, positiveZ]} />);\n                positiveIndex++;\n                positiveX += 1;\n                if (positiveIndex === maxShapes) {\n                    positiveIndex = 0;\n                    posZIndex++;\n                    positiveZ++;\n                    positiveX = startPosition;\n                    if (posZIndex === maxZ) {\n                        positiveZ = -1;\n                        posZIndex = 0;\n                        positiveY += 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Hopeless\") {\n                this.renderedObjects.push( <HopelessSphere position={[(Math.random() * (negativeXSphere + 1)) + negativeXSphere, (Math.random() * (negativeYSphere + 1)) + negativeYSphere, (Math.random() * (negativeZSphere + 1)) + negativeZSphere]} />);\n                sphereNegativeIndex++;\n                negativeXSphere += 1.5;\n                if (sphereNegativeIndex === maxSphere) {\n                    sphereNegativeIndex = 0;\n                    sphereNegZIndex++;\n                    negativeZSphere++;\n                    negativeXSphere = startPosition;\n                    if (sphereNegZIndex === maxZ) {\n                        negativeZSphere = -1;\n                        sphereNegZIndex = 0;\n                        negativeYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Nervous\") {\n                this.renderedObjects.push( <NervousCone position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Hope\") {\n                this.renderedObjects.push( <HopeSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Confused\") {\n                this.renderedObjects.push( <ConfusedCube position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Affectionate\") {\n                this.renderedObjects.push( <AffectionateSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Disappointed\") {\n                this.renderedObjects.push( <DisappointedTriangle position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Shy\") {\n                this.renderedObjects.push( <ShySphere position={[(Math.random() * (negativeXSphere + 1)) + negativeXSphere, (Math.random() * (negativeYSphere + 1)) + negativeYSphere, (Math.random() * (negativeZSphere + 1)) + negativeZSphere]} />);\n                sphereNegativeIndex++;\n                negativeXSphere += 1.5;\n                if (sphereNegativeIndex === maxSphere) {\n                    sphereNegativeIndex = 0;\n                    sphereNegZIndex++;\n                    negativeZSphere++;\n                    negativeXSphere = startPosition;\n                    if (sphereNegZIndex === maxZ) {\n                        negativeZSphere = -1;\n                        sphereNegZIndex = 0;\n                        negativeYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Frustrated\") {\n                this.renderedObjects.push( <FrustratedTriangle position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Anger\") {\n                this.renderedObjects.push( <AngerTriangle position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Playful\") {\n                this.renderedObjects.push( <PlayfulSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Irritated\") {\n                this.renderedObjects.push( <IrritatedCone position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Sick\") {\n                this.renderedObjects.push( <SickCone position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Curiosity\") {\n                this.renderedObjects.push( <CuriosityCylinder position={[positiveX, positiveY, positiveZ]} />);\n                positiveIndex++;\n                positiveX += 1;\n                if (positiveIndex === maxShapes) {\n                    positiveIndex = 0;\n                    posZIndex++;\n                    positiveZ++;\n                    positiveX = startPosition;\n                    if (posZIndex === maxZ) {\n                        positiveZ = -1;\n                        posZIndex = 0;\n                        positiveY += 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Violent\") {\n                this.renderedObjects.push( <ViolentCone position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Evil\") {\n                this.renderedObjects.push( <EvilTriangle position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Stressed\") {\n                this.renderedObjects.push( <StressedCube position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Heartbroken\") {\n                this.renderedObjects.push( <HeartbrokenSphere position={[(Math.random() * (negativeXSphere + 1)) + negativeXSphere, (Math.random() * (negativeYSphere + 1)) + negativeYSphere, (Math.random() * (negativeZSphere + 1)) + negativeZSphere]} />);\n                sphereNegativeIndex++;\n                negativeXSphere += 1.5;\n                if (sphereNegativeIndex === maxSphere) {\n                    sphereNegativeIndex = 0;\n                    sphereNegZIndex++;\n                    negativeZSphere++;\n                    negativeXSphere = startPosition;\n                    if (sphereNegZIndex === maxZ) {\n                        negativeZSphere = -1;\n                        sphereNegZIndex = 0;\n                        negativeYSphere += 1.5;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Surprised\") {\n                this.renderedObjects.push( <SurprisedCube position={[positiveX, positiveY, positiveZ]} />);\n                positiveIndex++;\n                positiveX += 1;\n                if (positiveIndex === maxShapes) {\n                    positiveIndex = 0;\n                    posZIndex++;\n                    positiveZ++;\n                    positiveX = startPosition;\n                    if (posZIndex === maxZ) {\n                        positiveZ = -1;\n                        posZIndex = 0;\n                        positiveY += 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Guarded\") {\n                this.renderedObjects.push( <GuardedCube position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Strong\") {\n                this.renderedObjects.push( <StrongCone position={[positiveX, positiveY, positiveZ]} />);\n                positiveIndex++;\n                positiveX += 1;\n                if (positiveIndex === maxShapes) {\n                    positiveIndex = 0;\n                    posZIndex++;\n                    positiveZ++;\n                    positiveX = startPosition;\n                    if (posZIndex === maxZ) {\n                        positiveZ = -1;\n                        posZIndex = 0;\n                        positiveY += 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Scared\") {\n                this.renderedObjects.push( <ScaredCone position={[negativeX, negativeY, negativeZ]} />);\n                negativeIndex++;\n                negativeX += 1;\n                if (negativeIndex === maxShapes) {\n                    negativeIndex = 0;\n                    negZIndex++;\n                    negativeZ++;\n                    negativeX = startPosition;\n                    if (negZIndex === maxZ) {\n                        negativeZ = -1;\n                        negZIndex = 0;\n                        negativeY -= 1;\n                    }\n                }\n            } else if (nonzero_emotions[0].emotion === \"Excited\") {\n                this.renderedObjects.push( <ExcitedSphere position={[(Math.random() * (positiveXSphere + 1)) + positiveXSphere, (Math.random() * (positiveYSphere + 1)) + positiveYSphere, (Math.random() * (positiveZSphere + 1)) + positiveZSphere]} />);\n                spherePositiveIndex++;\n                positiveXSphere += 1.5;\n                if (spherePositiveIndex === maxSphere) {\n                    spherePositiveIndex = 0;\n                    spherePosZIndex++;\n                    positiveZSphere++;\n                    positiveXSphere = startPosition;\n                    if (spherePosZIndex === maxZ) {\n                        positiveZSphere = -1;\n                        spherePosZIndex = 0;\n                        positiveYSphere += 1.5;\n                    }\n                }\n            }\n        }\n\n\n        return (\n            <Canvas ref={this.canvasRef} style={{height: 300}}>\n                <ambientLight intensity={0.5} />\n                <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />\n                <pointLight position={[-10, -10, -10]} />\n\n                {this.renderedObjects}\n                <OrbitControls />\n            </Canvas>\n         );\n    }\n}\n\nexport default Rendering;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\n\nclass MainTextArea extends React.Component {\n  constructor(props) {\n  \tsuper(props);\n\n    this.state = {\n      typingTimer : null,\n      inputString : \"\"\n    };\n\n\tthis.actualTextRef = React.createRef();\n  \tthis.textUpdate = this.textUpdate.bind(this);\n  \tthis.updateParent = this.updateParent.bind(this);\n  \tthis.clearValue = this.clearValue.bind(this);\n  }\n\n  clearValue() {\n  \tthis.actualTextRef.current.value = \"\";\n  }\n\n  textUpdate(event) {\n    clearTimeout(this.state.typingTimer);\n    if (event.target.value) {\n      this.setState({inputString: event.target.value, typingTimer: setTimeout(this.updateParent, 1000)});\n    }\n  }\n\n  updateParent() {\n  \tthis.props.handler();\n  }\n\n  render() {\n  \treturn (\n\t\t  <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Control as=\"textarea\" rows={10} onChange={event => this.textUpdate(event)} placeholder=\"enter text here\" ref={this.actualTextRef} />\n            </Form.Group>\n          </Form>\n  \t  );\n  }\n}\n\n\nexport default MainTextArea;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Home.css';\n\nimport { FacebookShareButton, TwitterShareButton, RedditShareButton } from \"react-share\";\nimport { FacebookIcon, TwitterIcon, RedditIcon } from \"react-share\";\n\nimport emptyImage from './empty_image.png';\nimport exampleImage from './example_line_plot.png';\nimport abstractImage from './example_abstract_plot.png';\nimport facebookLogo from './facebook_logo.png';\nimport instagramLogo from './instagram_logo.png';\nimport twitterLogo from './twitter_logo.png';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Image from 'react-bootstrap/Image';\nimport Modal from 'react-bootstrap/Modal';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { VictoryChart, VictoryTheme, VictoryLine, VictoryLegend } from \"victory\";\nimport Rendering from './Rendering';\n\nimport Download from './Download';\nimport MainTextArea from './MainTextArea';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showCSVDownloadModal : false,\n      show2DImageDownloadModal : false,\n      show3DImageDownloadModal : false,\n      showShareModal : false,\n      typingTimer : null,\n      // input_string : \"\",\n      diagramData : {sentiments: [], movingAverage: []},\n      tokens : []\n    };\n\n    // this.textUpdate = this.textUpdate.bind(this);\n    this.clearText = this.clearText.bind(this);\n    this.open2DImageDownloadModal = this.open2DImageDownloadModal.bind(this);\n    this.close2DImageDownloadModal = this.close2DImageDownloadModal.bind(this);\n    this.open3DImageDownloadModal = this.open3DImageDownloadModal.bind(this);\n    this.close3DImageDownloadModal = this.close3DImageDownloadModal.bind(this);\n    this.openCSVDownloadModal = this.openCSVDownloadModal.bind(this);\n    this.closeCSVDownloadModal = this.closeCSVDownloadModal.bind(this);\n    this.openShareModal = this.openShareModal.bind(this);\n    this.closeShareModal = this.closeShareModal.bind(this);\n    this.saveChart = this.saveChart.bind(this);\n    this.saveAbstract = this.saveAbstract.bind(this);\n    this.callServer = this.callServer.bind(this);\n    this.triggerDownload = this.triggerDownload.bind(this);\n    this.mainTextAreaRef = React.createRef();\n    this.saveCSV = this.saveCSV.bind(this);\n    // this.updateInputString = this.updateInputString.bind(this);\n  }\n\n  // updateInputString(newInputString) {\n  //   console.log(\"pogu\");\n  //   this.setState({input_string: newInputString});\n  //   this.callServer();\n  // }\n\n  // textUpdate(event) {\n  //   clearTimeout(this.state.typingTimer);\n  //   if (event.target.value) {\n  //     this.setState({input_string: event.target.value, typingTimer: setTimeout(this.callServer, 1000)});\n  //   }\n  // }\n\n  callServer() {\n    //this.setState({diagramData: [{x: 1, y: Math.floor(Math.random() * 10)}, {x: 2, y: Math.floor(Math.random() * 10)}, {x: 3, y: Math.floor(Math.random() * 10)}]});\n    const input_string = this.mainTextAreaRef.current.state.inputString;\n\n    console.log(\"Sent to server: \" + input_string);\n    fetch(\"http://208.87.134.10/api/emotions\", {\n      method: \"POST\",\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\"text\": input_string})})\n    .then(response => {\n      response.json().then(res => {\n        console.log(\"Response:\");\n        console.log(res);\n        //console.log(res.x_values);\n        this.setState({diagramData: {sentiments: [0].concat(res.x_values.sentiments), movingAverage: [0].concat(res.x_values.movingAverage)}})\n\n        this.setState({tokens: res.tokens})\n        //console.log(\"tokens: \" + this.state.tokens)\n      })\n    })\n    .catch(error => console.log(\"error: \" + error));\n    //this.refs.abstractImage.src = abstractImage;\n\n  }\n\n  triggerDownload (imgURI) {\n    let evt = new MouseEvent(\"click\", {\n      view: window,\n      bubbles: false,\n      cancelable: true\n    });\n\n    let a = document.createElement(\"a\");\n    a.setAttribute(\"download\", \"2d-polarity-graph.png\");\n    a.setAttribute(\"href\", imgURI);\n    a.setAttribute(\"target\", \"_blank\");\n\n    a.dispatchEvent(evt);\n  }\n\n  saveCSV() {\n    const tokens = this.state.tokens\n    let csvContent = \"data:text/csv;charset=utf-8,\"\n    if (tokens.length > 0) {\n      csvContent += \"Phrase,Polarity,,\" + Object.keys(tokens[0].emotions) + \"\\n\";\n      let i;\n      for (i = 0; i < tokens.length; i++) {\n\n        let line = \"\\\"\" + tokens[i].text.replace(/\"/g, \"\\\"\\\"\") + \"\\\",\" + this.state.diagramData.sentiments[i+1] + \",,\" + Object.values(tokens[i].emotions) + \"\\n\";\n        csvContent += line;\n        console.log(line)\n      }\n      //console.log(headers);\n\n      console.log(csvContent);\n      /*csvContent += tokens.map(e => {\n        console.log(typeof e);\n        e.join(\",\");\n      }).join(\"\\n\");*/\n    }\n\n\n\n    var encodedUri = encodeURI(csvContent);\n    let link = document.createElement('a');\n    link.download = 'data.csv';\n    link.href = encodedUri\n    link.click();\n  }\n\n  saveAbstract() {\n    let canvas = document.getElementById(\"ThreeDContainer\").children[0].children[0];\n    let imgURI = canvas.toDataURL(\"image/png\")\n    let link = document.createElement('a');\n    link.download = 'abstract.png';\n    link.href = imgURI\n    link.click();\n  }\n\n  saveChart() {\n    let svg = document.getElementById(\"chartID\").children[0].children[0];\n    let {width, height} = svg.getBBox();\n    let data = (new XMLSerializer()).serializeToString(svg);\n    let DOMURL = window.URL || window.webkitURL || window;\n\n    let img = document.createElement(\"img\");\n    let svgBlob = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});\n    let url = DOMURL.createObjectURL(svgBlob);\n\n\n    img.onload = () => {\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      let ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0, width, height);\n      DOMURL.revokeObjectURL(url);\n\n      let imgURI = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n\n      this.triggerDownload(imgURI);\n    }\n    img.src = url;\n\n  }\n\n\n\n  open2DImageDownloadModal() {\n    this.setState({\n      show2DImageDownloadModal : true\n    });\n  }\n\n  close2DImageDownloadModal() {\n    this.setState({\n      show2DImageDownloadModal : false\n    });\n  }\n\n  open3DImageDownloadModal() {\n    this.setState({\n      show3DImageDownloadModal : true\n    });\n  }\n\n  close3DImageDownloadModal() {\n    this.setState({\n      show3DImageDownloadModal : false\n    });\n  }\n\n  openCSVDownloadModal() {\n    this.setState({\n      showCSVDownloadModal : true\n    });\n  }\n\n  closeCSVDownloadModal() {\n    this.setState({\n      showCSVDownloadModal : false\n    });\n  }\n\n  openShareModal() {\n    this.setState({\n      showShareModal : true\n    });\n  }\n\n  closeShareModal() {\n    this.setState({\n      showShareModal : false\n    });\n  }\n\n  clearText() {\n    this.setState({tokens: [], diagramData: {sentiments: [], movingAverage: []}\n      // , input_string: \"\"\n    });\n    //this.refs.abstractImage.src = emptyImage;\n    // this.refs.mainTextArea.value = \"\";\n    this.mainTextAreaRef.current.clearValue();\n  }\n\n  render() {\n    return (\n      <div className=\"main-page\">\n        <div className=\"row justify-content-center ml-0 mr-0\">\n          <div className=\"pt-3 col-lg-10\">\n            <div className=\"row py-3 ml-0 mr-0\">\n              <div className=\"col-6 px-1 py-5\">\n\n                <MainTextArea handler={this.callServer} ref={this.mainTextAreaRef} />\n              {/*\n                <Form>\n                  <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Control as=\"textarea\" rows={10} onChange={event => this.textUpdate(event)} placeholder=\"enter text here\" ref=\"mainTextArea\" />\n                  </Form.Group>\n                </Form>\n              */}\n\n                <Button className=\"mx-2\" id=\"green\" variant=\"primary\" onClick={this.clearText}>clear</Button>\n                <p id=\"subtitle\">when you enter your writing, it gets analyzed by our algorithm in order to draw an image!</p>\n              </div>\n              <div className=\"col-6 px-3\">\n                <Tabs defaultActiveKey=\"linear\" id=\"figure-tabs\" transition={false}>\n                  <Tab eventKey=\"linear\" title=\"linear\">\n                    <div id=\"chartID\">\n                      <VictoryChart theme={VictoryTheme.material}>\n                        <VictoryLegend orientation = {\"horizontal\"} x={100}  data = {[\n                          {name: \"Sentiment\", symbol: {fill:\"black\"}},\n                          {name: \"Running Average\", symbol: {fill:\"red\"}}]}/>\n                        <VictoryLine data={this.state.diagramData.sentiments}/>\n                        <VictoryLine style={{ data: { stroke: \"red\" } }} data={this.state.diagramData.movingAverage}/>\n                      </VictoryChart>\n                    </div>\n                    {/*2D buttons and modal*/}\n                    <Button className=\"mx-2\" id=\"green\" variant=\"primary\" onClick={this.openCSVDownloadModal}>download CSV</Button>\n                    <Button className=\"mx-2\" id=\"pink\" variant=\"primary\" onClick={this.openShareModal}>share!</Button>\n                    <Button className=\"mx-2\" id=\"green\" variant=\"primary\" onClick={this.open2DImageDownloadModal}>download image</Button>\n                    <Modal show={this.state.show2DImageDownloadModal} onHide={this.close2DImageDownloadModal}>\n                      <Modal.Header closeButton>\n                        <Modal.Title>Download Image?</Modal.Title>\n                      </Modal.Header>\n                      <Modal.Body>Are you sure you want to download the image?</Modal.Body>\n                      <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.close2DImageDownloadModal}>\n                          Cancel\n                        </Button>\n                        <Button onClick={this.saveChart}>\n                          Download\n                        </Button>\n                      </Modal.Footer>\n                    </Modal>\n                  </Tab>\n                  <Tab eventKey=\"abstract\" title=\"abstract\">\n                    <div className = \"col-60\" id=\"ThreeDContainer\">\n                      <Rendering array={this.state.tokens}/>\n                    </div>\n                    {/*3D buttons and modal*/}\n                    <Button className=\"mx-2\" id=\"green\" variant=\"primary\" onClick={this.openCSVDownloadModal}>download CSV</Button>\n                    <Button className=\"mx-2\" id=\"pink\" variant=\"primary\" onClick={this.openShareModal}>share!</Button>\n                    {/*<Button className=\"mx-2\" id=\"green\" variant=\"primary\" onClick={this.open3DImageDownloadModal}>download image</Button>*/}\n                    <Modal show={this.state.show3DImageDownloadModal} onHide={this.close3DImageDownloadModal}>\n                      <Modal.Header closeButton>\n                        <Modal.Title>Download Image?</Modal.Title>\n                      </Modal.Header>\n                      <Modal.Body>Are you sure you want to download the image?</Modal.Body>\n                      <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.close3DImageDownloadModal}>\n                          Cancel\n                        </Button>\n                        <Button onClick={this.saveAbstract}>\n                          Download\n                        </Button>\n                      </Modal.Footer>\n                    </Modal>\n                  </Tab>\n                </Tabs>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Download Modal to download a CSV file */}\n        <Modal show={this.state.showCSVDownloadModal} onHide={this.closeCSVDownloadModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Download CSV?</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Are you sure you want to download the CSV?</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.closeCSVDownloadModal}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" onClick={this.saveCSV}>\n                Download\n              </Button>\n          </Modal.Footer>\n        </Modal>\n\n        {/* Download Modal to download a 2D image\n        <Modal show={this.state.showImageDownloadModal} onHide={this.closeImageDownloadModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Download Image?</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Are you sure you want to download the image?</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.closeImageDownloadModal}>\n              Cancel\n            </Button>\n            <a href={exampleImage} download=\"Sentiment-2D.png\">\n              <Button variant=\"primary\" onClick={this.closeImageDownloadModal}>\n                Download\n              </Button>\n            </a>\n          </Modal.Footer>\n        </Modal>*/}\n\n        <Modal show={this.state.showShareModal} centered dialogClassName=\"share-modal\" onHide={this.closeShareModal}>\n          <Modal.Header closeButton className=\"no-border\"/>\n          <Modal.Body>\n            <div className=\"col\">\n              <Modal.Title className=\"col no-gutter\">\n                <p className=\"h4 text-center\" style={{margin: 0}}>Tell your friends about The Sentimental Image!</p>\n              </Modal.Title>\n              <div className='row justify-content-center'>\n                <div className=\"col text-center\">\n                  <FacebookShareButton\n                    url={\"https://www.gatech.edu\"}\n                    quote={\"Check out The Sentimental Image! Visualize your writing!\"}\n                    hashtag=\"#thesentimentalimage\">\n                    <FacebookIcon size={50} round={false} />\n                  </FacebookShareButton>\n                </div>\n                <div className=\"col text-center\">\n                  <RedditShareButton\n                    url={\"https://www.gatech.edu\"}\n                    quote={\"Check out The Sentimental Image! Visualize your writing!\"}>\n                    <RedditIcon size={50} round={false} />\n                  </RedditShareButton>\n                </div>\n                <div className=\"col text-center\">\n                  <TwitterShareButton\n                    url={\"https://www.gatech.edu\"}\n                    quote={\"Check out The Sentimental Image! Visualize your writing!\"}>\n                    <TwitterIcon size={50} round={false} />\n                  </TwitterShareButton>\n                </div>\n              </div>\n            </div>\n          </Modal.Body>\n\n        </Modal>\n\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/Lillian.83c257db.jpg\";","export default __webpack_public_path__ + \"static/media/profile-placeholder.79bfd233.png\";","export default __webpack_public_path__ + \"static/media/Heather.0cce7e39.jpg\";","export default __webpack_public_path__ + \"static/media/Megan.72def1bb.jpg\";","export default __webpack_public_path__ + \"static/media/Neil.e8a02cfe.jpg\";","export default __webpack_public_path__ + \"static/media/Patrick.cfd3ee3b.jpg\";","export default __webpack_public_path__ + \"static/media/Shaan.b6333cf7.jpg\";","export default __webpack_public_path__ + \"static/media/Yaewon.27aa83b6.jpg\";","import React from 'react';\n\nimport \"./About.css\";\n\nimport profileImage from './profile-placeholder.png'\n\nimport Lillian from './TeamPhotos/Lillian.jpg'\nimport Heather from './TeamPhotos/Heather.jpg'\nimport Megan from './TeamPhotos/Megan.jpg'\nimport Neil from './TeamPhotos/Neil.jpg'\nimport Patrick from './TeamPhotos/Patrick.jpg'\nimport Shaan from './TeamPhotos/Shaan.jpg'\nimport Yaewon from './TeamPhotos/Yaewon.jpg'\n\n\nimport Image from 'react-bootstrap/Image';\n\n\nclass About extends React.Component {\n    render() {\n        return (\n            <div className=\"About\">\n                <h2>about</h2>\n                <p>Currently, there is a lack of tools that can be used by writers to visualize the sentiment and emotions of their writing. The Sentimental Image was created to provide writers with a tool that allows them to easily visualize their writings with the help of machine learning. Our website is open to anyone who writes and is looking for ways to visualize the sentiment of their writing and as well as to machine learning enthusiasts.</p>\n                <h2>how to use?</h2>\n                <p>Enter in any writing into the text box on the home page, and the algorithm will then generate an output for you.  The output can be a 3D abstract representation of the writing or a linear representation that will plot the sentiment of the writing.  You can freely choose which version they want to see by clicking on the tabs at the top left. Additionally, you can download the image, download a CSV file that contains the raw data of the sentiments in your writing, and you can share this website with your friends on social media! Make sure to use punctuation to end your sentences, as the algorithm outputs an emotion on a per-sentence basis and uses punctuation to recognize when a sentence ends.</p>\n                <h2>how does it work?</h2>\n                <p>When you enter in some text, two separate algorithms are running to produce two different representations.  For the linear representation, the algorithm that is being used is the NLKT sentiment intensity analyzer.  This is a python package that can be imported and installed easily (see links below).  What this algorithm does is it takes in an input in the form of some sort of text and then produces a score between +1 and -1 that models how positive and negative the writing is, +1 being very positive and -1 being very negative.  The way we decided to implement it was by first cleaning the text, meaning we deleted neutral words such as “the”, “that”, “these”, etc... This helps to get a more accurate score because a lot of these words are filler words (also called stop words, see links below).  Then we break the text up into chunks (based on text size) and then feed those chunks into the algorithm to produce all the sentiment scores.  We then graph a running average and a global average of the words and plot all the points onto a graph which is what is displayed in the linear representation. </p>\n                <p>For the 3D representation, we use an open-licensed model called Deep Moji.  Deep Moji is a machine learning model that takes in some text and produces gives a score for each emoji.  Deep Moji is built and trained using tweets (for more information and GitHub see links below).  With the scores that we have obtained we pull only the top few emojis and map each emoji to an emotion.  We then map the emotions to some colors, shapes, and positions. Those geometric figures then make the picture that is displayed in the 3D representation.  We are essentially taking the results of Deep Moji and converting the output into a picture by taking each sentence and converting it into a geometric figure.  The way we chose the mapping for emotions to shapes and colors is by conducting a survey and collecting what shapes and colors people associate with different emotions.</p>\n                <h2>team</h2>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Lillian} ref=\"abstractImage\" />\n                            <h4>Lillian-Yvonne Bertram</h4>\n                            <p><a href=\"https://www.lillianyvonnebertram.com\">Website</a></p>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Heather} ref=\"profileImage\" />\n                            <h4>Heather Zhu</h4>\n                            <p><a href=\"https://www.linkedin.com/in/heatherzhu/\">LinkedIn</a></p>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Megan} ref=\"abstractImage\" />\n                            <h4>Megan Minnear</h4>\n                            <p><a href=\"https://www.linkedin.com/in/megan-minnear\">LinkedIn</a></p>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Neil} ref=\"abstractImage\" />\n                            <h4>Neil Thistlethwaite</h4>\n                            <p><a href=\"https://www.linkedin.com/in/nthistle00/\">LinkedIn</a></p>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Patrick} ref=\"abstractImage\" />\n                            <h4>Patrick Li</h4>\n                            <p><a href=\"https://www.linkedin.com/in/patrick-li-0/\">LinkedIn</a></p>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Shaan} ref=\"abstractImage\" />\n                            <h4>Shaan Gill</h4>\n                            <p><a href=\"https://www.linkedin.com/in/shaan-gill-10742b186/\">LinkedIn</a></p>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"profileCard\">\n                            <Image width=\"100%\" src={Yaewon} ref=\"abstractImage\" />\n                            <h4>Yaewon Ahn</h4>\n                            <p><a href=\"https://www.linkedin.com/in/yaewon-ahn-75a53b171/\">LinkedIn</a></p>\n                        </div>\n                    </div>\n                    \n                </div>\n                <h2>additional resources</h2>\n                <ul>\n                    <li>NLTK Install: <a href=\"https://www.nltk.org/install.html\">https://www.nltk.org/install.html</a></li>\n                    <li>Stop Words: <a href=\"https://stackabuse.com/removing-stop-words-from-strings-in-python/\">https://stackabuse.com/removing-stop-words-from-strings-in-python/</a></li>\n                    <li>NLTK Sentiment: <a href=\"https://www.nltk.org/api/nltk.sentiment.html\">https://www.nltk.org/api/nltk.sentiment.html</a></li>\n                    <li>NLTK Sentiment Analysis: <a href=\"https://realpython.com/python-nltk-sentiment-analysis/ \">https://realpython.com/python-nltk-sentiment-analysis/</a></li>\n                    <li>DeepMoji: <a href=\"https://deepmoji.mit.edu/\">https://deepmoji.mit.edu/</a></li>\n                    <li>DeepMoji GitHub: <a href=\"https://github.com/bfelbo/DeepMoji\">https://github.com/bfelbo/DeepMoji</a></li>\n                </ul>\n                <br></br>\n                <br></br>\n            </div>\n            \n        );\n    }\n}\n\nexport default About;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Navbar, Nav} from 'react-bootstrap'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <Navbar>\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/\">\n              <Nav.Link className=\"mr-5\">home</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/about\">\n              <Nav.Link className=\"mr-5\">about us</Nav.Link>\n            </LinkContainer>\n            </Nav>\n            <Navbar.Brand>\n              <h1>The Sentimental Image</h1>\n            </Navbar.Brand>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Header from './components/Header';\nimport Rendering from './components/Rendering';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Header/>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}